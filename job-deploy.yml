parameters:
  - name: kubeCon
    type: string

  - name: namespace
    type: string

  - name: releaseName
    type: string

  - name: poolName
    type: string
    
  - name: deploymentEnvironment
    type: string

  - name: overrideValues
    type: string

jobs:
  - deployment: deploy
    displayName: Deploy
    dependsOn: build_and_release
    condition: succeeded()
    # pool:
    #   ${{ if ne(parameters.poolName, '') }}:
    #     name: ${{ parameters.poolName }}
    #   ${{ if eq(parameters.poolName, '') }}:
    #     vmImage: 'ubuntu-latest'
    environment: ${{ parameters.deploymentEnvironment }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
              displayName: Download source

            - script: echo "##vso[task.setvariable variable=tag]$(tag)$(git describe --tags --long | sed '0,/-/s/-/./')"
              displayName: Append tag with git describe

            - task: HelmDeploy@0
              displayName: Helm upgrade
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceConnection: ${{ parameters.kubeCon }}
                namespace: ${{ parameters.namespace }}
                command: upgrade
                chartType: filepath
                chartPath: ./chart
                releaseName: ${{ parameters.releaseName }}
                overrideValues: ${{ parameters.overrideValues }}
                install: true
                waitForExecution: true
        on:
          failure:
            # pool:
            #   ${{ if ne(parameters.poolName, '') }}:
            #     name: ${{ parameters.poolName }}
            #   ${{ if eq(parameters.poolName, '') }}:
            #     vmImage: 'ubuntu-latest'
            steps:
              - task: HelmDeploy@0
                displayName: Helm rollback
                inputs:
                  connectionType: 'Kubernetes Service Connection'
                  kubernetesServiceConnection: ${{ parameters.kubeCon }}
                  namespace: ${{ parameters.namespace }}
                  command: rollback
                  arguments: ${{ parameters.releaseName }}
                  waitForExecution: true
